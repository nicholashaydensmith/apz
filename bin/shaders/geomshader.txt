#version 330 

layout(triangles) in; 
layout(triangle_strip, max_vertices = 9)out; 

uniform struct Matrices 
{ 
   mat4 projMatrix; 
   mat4 modelMatrix; 
   mat4 viewMatrix;                                                                            
   mat4 normalMatrix; 
} matrices; 

in vec2 vTexCoordPass[]; // Input variable is array, one value for each vertex
in vec3 vNormalPass[]; // Notice that name of out variable in vertex shader must match	
	
smooth out vec3 vNormal; 
smooth out vec2 vTexCoord; 

uniform float fBender; 
	
void main() 
{ 


  // Calculate modelview times projection matrix
  mat4 mMVP = matrices.projMatrix*matrices.viewMatrix*matrices.modelMatrix; 

  // Calculate the centroid point (just sum up all coordinates and divide by 3
  // You can see built-in variable gl_in here, notice adding normal multiplied by bender value
  vec3 vMiddle = (gl_in[0].gl_Position.xyz+gl_in[1].gl_Position.xyz+gl_in[2].gl_Position.xyz)/3.0+(vNormalPass[0]+vNormalPass[1]+vNormalPass[2])*fBender; 

  // Centroid coordinate is average of three as well
  vec2 vTexCoordMiddle = (vTexCoordPass[0]+vTexCoordPass[1]+vTexCoordPass[2])/3.0; 

  // Transform normals of 3 triangle vertices with transform matrix and store them in this array
  vec3 vNormalTransformed[3]; 
  for(int i = 0; i < 3; i++)vNormalTransformed[i] = (vec4(vNormalPass[i], 1.0)*matrices.normalMatrix).xyz; 
   
  // Calculate centroid normal
  vec3 vNormalMiddle = (vNormalTransformed[0]+vNormalTransformed[1]+vNormalTransformed[2])/3.0; 

  for(int i = 0; i < 3; i++) 
  { 
  /*  // Emit first vertex
    vec3 vPos = gl_in[i].gl_Position.xyz; 
    gl_Position = vec4(vPos, 1.0); 
    vNormal = //(vec4(vNormalTransformed[i], 1.0)).xyz; 
    vTexCoord = vTexCoordPass[i]; 
    EmitVertex(); 

    // Emit second vertex, that comes next in order
    vPos = gl_in[(i+1)%3].gl_Position.xyz; 
    gl_Position = vec4(vPos, 1.0); 
    vNormal = (vec4(vNormalTransformed[(i+1)%3], 1.0)).xyz; 
    vTexCoord = vTexCoordPass[(i+1)%3]; 
    EmitVertex(); 
*/
    // Emit third vertex - the centroid
    gl_Position = vec4(vMiddle, 1.0); 
    vNormal = vNormalMiddle; 
    vTexCoord = vTexCoordMiddle; 
    EmitVertex(); 

    EndPrimitive(); 
  } 
}